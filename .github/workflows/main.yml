#Workflow for Continuous Integration and Continuous Deployment
name: Continuous Integration / Continuous Deployment

# Triggers the workflow on push or pull request events
on:
  push:
    branches: '*'
  pull_request:
    branches: '*'
    
jobs:
  test:
    name: Test using xUnit
    runs-on: ubuntu-latest # OS to execute the job in
    steps:
    
      - name: Checkout
        uses: actions/checkout@v2 # Checks out the main branch in it's current state to the runner
        
      - name: Setup .NET
        uses: actions/setup-dotnet@v2 # Set up .NET 6.0
        with:
          dotnet-version: '6.0'
          
      - name: Install dependencies
        run: dotnet restore # Install all dependencies
        
      - name: Set test title
        run: |
          echo "title=CI Test Run ${{github.run_number}}" >> $GITHUB_ENV
          echo "file_name=CI-Test-Run-${{github.run_number}}.md" >> $GITHUB_ENV
      
      - name: Run tests and generate report
        run: dotnet test --configuration 'Release' --logger:"liquid.md;LogFileName=${{github.workspace}}/${{env.file_name}};Title=${{env.title}};"
        
      - name: Upload report as a build artifact
        uses: actions/upload-artifact@v2
        if: ${{always()}}
        with:
          name: 'CI-Test-Run-${{github.run_number}}'
          path: ${{github.workspace}}/${{env.file_name}}      
          
  deploy:
    name: Deploy to Heroku
    needs: [test] # Requires the test job to finish before executing this job
    if: success() && github.ref == 'refs/heads/main' # Executes this job only if the test job ran successfully and only if the push/PR was in main branch
  
    runs-on: ubuntu-latest # OS to execute the job in
    steps:
    
    - name: Checkout
      uses: actions/checkout@v2 # Checks out the main branch in it's current state to the runner
  
    - name: Login / Build / Deploy
      env:
        HEROKU_API_KEY: ${{ secrets.HEROKU_API_KEY }}  # Stores the Heroku API Key as an environment variable. Uses github secrets so that it is not exposed
        HEROKU_APP_NAME: ${{ 'smart-greenhouse-data-server' }} # Stores the heroku app name as an environment variable
        
    # 1. Change working directory to root of the project where the dockerfile is located
    # 2. Log in to heroku container registry, automatically uses the environment variable defined previously
    # 3. Build the docker image using Dockerfile and push it to Heroku container registry of our app
    # 4. Release the image
      run: |
        cd SEP4DataWarehouse
        echo $HEROKU_API_KEY | docker login --username=_ --password-stdin registry.heroku.com
        heroku container:push -a $HEROKU_APP_NAME web
        heroku container:release -a $HEROKU_APP_NAME web
